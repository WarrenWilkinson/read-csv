#+TITLE: read-csv
#+author: Warren Wilkinson
#+email: warrenwilkinson@gmail.com
#+LATEX_CLASS: tufte

# Repository: https://github.com/WarrenWilkinson/read-csv

* Overview 

read-csv is a stream oriented CSV (comma-separated value) reader that supports excel .csv files.

#+begin_src lisp
  (with-open-file (s "/path/to/csv")
    (parse-csv s))
;; Returns a list of lists of strings.
#+end_src

** Features

   * Low line of code count (around 50 lines of code)
   * Supports quotes, including newlines and separator characters within the quotes.
   * Supports Unix style LF line endings and Dos CRLF line endings. (automatically)

* Installation
** Quick Lisp

Install [[http://www.quicklisp.org/beta/][Quick Lisp]] and then run:

#+BEGIN_SRC lisp
(ql:quickload 'read-csv)
#+END_SRC

If you have problems, see the [[#support][support]] section, and you may want to [[#runtests][run the tests]].

** Gentoo

As root, 

#+BEGIN_SRC sh
emerge read-csv
#+END_SRC

Once the emerge is finished, the package can be loaded using ASDF:
#+BEGIN_SRC lisp
(asdf:operate 'asdf:load-op :read-csv)
#+END_SRC

If you have problems, see the [[#support][support]] section, otherwise you may want to [[#runtests][run the tests]].

** Ubunto

#+BEGIN_SRC sh
sudo apt-get install read-csv
#+END_SRC

Once the installation is finished, the package is loadable using ASDF:

#+BEGIN_SRC lisp
(asdf:operate 'asdf:load-op :read-csv)
#+END_SRC

If you have problems, see the [[#support][support]] section, otherwise you may want to [[#runtests][run the tests]].

** Manual Installation

In summary: Untar the [[https://github.com/WarrenWilkinson/read-csv/archive/master.tar.gz][.tar]] package and then symlink the .asd files into a place where ASDF can find them. 

  1. Untar the files where you want them to be.  On windows download the [[https://github.com/WarrenWilkinson/read-csv/archive/master.zip][.zip]] and unzip it instead, it's the same files.
  2. ASDF could be looking anywhere -- it depends on your setup.  Run this in your lisp repl to get a clue
     as to where ASDF is seeking libraries[fn:: you might need to (require 'asdf) before running this example]:

     #+BEGIN_SRC lisp
        (mapcan #'funcall asdf:*default-source-registries*)
     #+END_SRC

  3. Symlink the .asd files to the source directory. If you use windows, [[http://bc.tech.coop/blog/041113.html][these instructions on symlink alternatives apply to you]].

Once the files are in place, the package can be loaded with ASDF by:
#+BEGIN_SRC lisp
(asdf:operate 'asdf:load-op :read-csv)
#+END_SRC

If you have problems, see the [[#support][support]] section.  If you don't have problems you may want to [[#runtests][run the tests]] anyway, because you can.

** Running the Tests
   :PROPERTIES:
   :CUSTOM-ID:  runtests
   :END:

Once the system is loaded, it can be tested with asdf. 

#+BEGIN_SRC lisp
(asdf:operate 'asdf:test-op :read-csv)
#+END_SRC

This should display something like the following. There should
be *zero failures*, if you have failures see the [[#support][support]] section
of this document.

#+BEGIN_SRC sh
   RUNNING READ-CSV TESTS...
   READ-CSV TEST RESULTS: 
        Tests: 519
      Success: 519
     Failures: 0
#+END_SRC

** Getting Support
   :PROPERTIES:
   :CUSTOM-ID:  support
   :END:

You can find support on this libraries [[http://warrenwilkinson.ca/read-csv][website]] and/or [[https://github.com/WarrenWilkinson/read-csv][github]] repository. Or you can email [[mailto:warrenwilkinson@gmail.com][Warren Wilkinson]].

* Implementation

Most Lisp CSV readers hover around 400 lines of code. This one is 68. 

The difference is this one is coded as state machine in a dense 2D grid, as described in [[http://galileo.phys.virginia.edu/classes/551.jvn.fall01/fsm.html][FINITE State Machines in Forth]]. "If you are in this /state/ and you see
this /character/ then you ..." 

#+TBLNAME: parser
|-----------+----------------+---------------+--------------+----------------+--------------+----------------|
| *state*   | *white*        | *return*      | *linefeed*   | *quote*        | *separator*  | *other*        |
|-----------+----------------+---------------+--------------+----------------+--------------+----------------|
| *start*   | noop ->start   | ship ->return | ship ->done! | noop ->quote   | next ->start | addc ->unquote |
| *return*  | noop ->start   | ship ->return | noop ->done! | noop ->start   | next ->start | addc ->unquote |
| *unquote* | addc ->unquote | ship ->return | ship ->done! | addc ->unquote | next ->start | addc ->unquote |
| *quote*   | addc ->quote   | noop ->q+ret  | addl ->quote | noop ->q+quote | addc ->quote | addc ->quote   |
| *q+ret*   | addc ->quote   | noop ->q+ret  | addl ->quote | noop ->q+quote | addc ->quote | addc ->quote   |
| *q+quote* | noop ->q+q&w   | ship ->return | ship ->done! | addc ->quote   | next ->start | addc ->unquote |
| *q+q&w*   | noop ->q+q&w   | ship ->return | ship ->done! | addc ->quote   | next ->start | addc ->unquote |
|-----------+----------------+---------------+--------------+----------------+--------------+----------------|

1) perform the designated function, and 2) transition to the designated new state. 

For example, if we start /(e.g. state start)/ and spot quote, then we perform noop and change to quote state.
Then, in the quote state, if we spot '/A/', perform 'addc' (add character) and remain in the quote state. 

** Collecting the Input

The functions used by the above table are:

  * noop :: Do no action
  * addc :: Add a character to the current CSV record.
  * addl :: Add a newline character to the current CSV record.
  * next :: Finish the current CSV record and start the next.
  * ship :: Cleanup the current set of CSV records for returning them to the end user.

Internally, these methods play with three dynamic variables:  *\*record\** and *\*records\** and *\*white-char-count\**. 
The first, during run time, holds a list of characters -- in reverse order. The second holds the list of parsed records -- also in
reverse order (but each record in proper order).  The *next* method reverses the order and coerces the csv data to
a string. The *ship* method reverses the *\*records\** list so it's in proper order.

The last variable, \*white-char-count* keeps a count of how many characters we've seen since after the quote. It's used
to let us to remove whitespace characters after the closing quote without removing whitespace characters within
the quotes.

#+NAME: primitives
#+begin_src lisp
  (defun noop (c) (declare (ignore c)))
  (defun addc (c) (push c *record*))
  (defun addl (c) (declare (ignore c)) (push #\Newline *record*))
  (flet ((white (c) (or (char= c #\Space) (char= c #\Tab))))
    (defun next (c) 
      (declare (ignore c))
      (let ((eow (or (position-if-not #'white *record*) (length *record*))))
        (push (coerce (nreverse (nthcdr (max 0 (min eow (1- *white-char-count*))) *record*)) 'string) *records*))
      (setf *record* nil)))
  (defun ship (c) (next c) (setf *records* (nreverse *records*)))
#+end_src

** Traversing the Input

We read CSV by running our state machine until the /done/ state is reached. 

#+NAME: read-csv
#+begin_src lisp
(defun char-class (sep char)
  (case char (#\Space 0) (#\Return 1) (#\Linefeed 2) (#\" 3) (otherwise (if (char= sep char) 4 5))))

(defun read-csv (stream &optional (sep #\,) (eof-error-p t) eof-value)
  "Return CSV data and a second value that's true if row ended by EOF."
  (let ((*records* nil)
	(*record* nil)
        (*white-char-count* 0))
    (declare (special *record* *records* *white-char-count*))
    (loop with state = start
          for char = (read-char stream (and (null *records*) eof-error-p) :eof)
          when (eq char :eof) 
          do (return-from read-csv (values (if *records* (ship :eof) eof-value) t))
          do (incf *white-char-count*)
          do (let ((class (char-class sep char)))
               (when (= class quote) (setf *white-char-count* 0))
	       (funcall (aref +csv-table+ state class 0) char)
	       (setf state (aref +csv-table+ state class 1)))
       until (eq state done!))
    (values *records* (eq :eof (peek-char nil stream nil :eof)))))
#+end_src

** Parsing whole files: parse-csv

To parse a whole file, the utility parse-csv calls read-csv until the end-of-file.

#+name: parse-csv
#+begin_src lisp
  (defun parse-csv (stream  &optional (sep #\,))
    (loop for (line end-p) = (multiple-value-list (read-csv stream sep nil :eof))
          unless (eq line :eof) collect line
          until end-p))
#+end_src

** Test Framework

The test framework combines jumbles of CSV statements and calls read-csv on them.  In practice it means I take
(upto) 5 patterns, sequentially, from the a predefined list of hard patterns.  Then I take all permutations
(120, if 5 patterns) and combine them as 1 record per row (and 5 rows), 2 per row, 3 per row, 4 per row and 5 per row.
Then I test that I can parse it back correctly.

The jumbler is shown below, but I also test parse-csv by parsing larger examples but that is not shown here.

#+NAME: do-testing
#+BEGIN_SRC lisp 
 
  (defun concat-with (strings item)
    (if (null strings)
        ""
        (apply #'concatenate 'string (first strings) (mapcan #'(lambda (a) (list item a)) (rest strings)))))
  
  (defun build-answers (i strings)
    (loop while strings
          collect (loop for n upto (1- i)
                        while strings 
                        collect (car strings)
                        do (setf strings  (cdr strings)))))
  
  (defun build-string (i strings)
    (concatenate 'string 
       (concat-with (mapcar #'(lambda (s) (concat-with s ",")) (build-answers i strings)) (list #\Newline))
       '(#\Newline)))
  
  (defun all-combinations (patterns) 
     (if (null (cdr patterns))
         (list patterns)
         (loop for i in patterns
               nconc (mapcar #'(lambda (p) (cons i p)) (all-combinations (remove i patterns))))))
  
  (defun make-test (description)
    #'(lambda ()
        (block test
          ;(loop for pattern in (all-combinations description)
          (format t "~%Pattern: ~s" (substitute #\' #\" (remove #\Newline (build-string (length description) (mapcar #'car description)))))
          (dotimes (i (length description) t)
            (format t "~%  @~d" i)
            (let ((string (build-string (1+ i) (mapcar #'car description)))
                  (answers (build-answers (1+ i) (mapcar #'cdr description))))
              (with-input-from-string (s string)
                (loop for answer in answers
                      for (got end) = (multiple-value-list (read-csv s))
                      unless (equalp answer got)
                      do (format t "~%Expected ~a, got ~a" answer got)
                      and do (return-from test nil)
                      if (eq answer (car (last answers)))
                      unless end
                      do (format t "~%Expected EOF, but didn't see it!")
                      unless (not end)
                      do (format t "~%Did not expect EOF, but saw it!"))
                (let ((read-more (read-csv s #\, nil :eof)))
                (unless (eq read-more :eof)
                  (format t "~%Could read past end: ~s" read-more)
                  (return-from test nil)))))))))
  
  
#+END_SRC

*** Parse-csv tests

These tests were yanked from [[https://github.com/AccelerationNet/cl-csv][CL-CSV]], another Lisp CSV parser.

#+NAME: parse-csv-tests
#+begin_src lisp   
  (defmacro deftest (name code result)
    `(defun ,name ()
       (format t "~%~a" ',name)
       (let ((expect ,result)
             (got ,code))
         (if (equalp expect got)
             t
             (progn (format t "~%Expected~% ~s~%but got~%~s" expect got)
                    nil)))))
  
  (defvar *a-tough-example-answer* '(("very tough" "easier to do")))
  (defun a-tough-example () 
    (with-input-from-string (s "  \"very tough\"   ,    easier to do     
  ")
      (parse-csv s)))
  
  (deftest test-tough (a-tough-example) *a-tough-example-answer*)
  
  (defvar *big-example-answer*
    '(("first name" "last name"   "job \"title\""                      "number of hours" "id")
      ("Russ"       "Tyndall"     "Software Developer's, \"Position\"" "26.2"            "1")
      ("Adam"       "Smith"       "Economist"                          "37.5"            "2")
      ("John"       "Doe"         "Anonymous Human"                    "42.1"            "3")
      ("Chuck"      "Darwin"      "Natural Philosopher"                "17.68"           "4")
      ("Bill"       "Shakespeare" "Bard"                               "12.2"            "5")
      ("James"      "Kirk"        "Starship Captain"                   "13.1"            "6")
      ("Bob"        "Anon"        ""                                   "13.1"            "6")
      ("Mr"         "Iñtërnâtiônàlizætiøn" ""                          "1.1"             "0")))
  
  (defun big-example () 
    (with-input-from-string (s "first name,last name,\"job \"\"title\"\"\",number of hours,id
  Russ,Tyndall,\"Software Developer's, \"\"Position\"\"\",26.2,1
  Adam,Smith,Economist,37.5,2
  John,Doe,Anonymous Human,42.1,3
  Chuck,Darwin,Natural Philosopher,17.68,4
  Bill,Shakespeare,Bard,12.2,5
  James,Kirk,Starship Captain,13.1,6
  Bob,Anon,,13.1,6
  Mr,Iñtërnâtiônàlizætiøn,,1.1,0")
      (parse-csv s)))
  
  
  (defun quoted-big-example () 
    (with-input-from-string 
        (s "\"first name\",\"last name\",\"job \"\"title\"\"\",\"number of hours\",\"id\"
  \"Russ\",\"Tyndall\",\"Software Developer's, \"\"Position\"\"\",\"26.2\",\"1\"
  \"Adam\",\"Smith\",\"Economist\",\"37.5\",\"2\"
  \"John\",\"Doe\",\"Anonymous Human\",\"42.1\",\"3\"
  \"Chuck\",\"Darwin\",\"Natural Philosopher\",\"17.68\",\"4\"
  \"Bill\",\"Shakespeare\",\"Bard\",\"12.2\",\"5\"
  \"James\",\"Kirk\",\"Starship Captain\",\"13.1\",\"6\"
  \"Bob\",\"Anon\",\"\",\"13.1\",\"6\"
  \"Mr\",\"Iñtërnâtiônàlizætiøn\",\"\",\"1.1\",\"0\"")
      (parse-csv s)))
  
  (deftest test-big        (big-example)        *big-example-answer*)
  (deftest test-quoted-big (quoted-big-example) *big-example-answer*)

  (defvar *multiline-answer*
    '(("this" "is" "a" "test
  of
  multiline" "data")
      ("row2" "of" "the" "test
  of
  multiline" "data")))
  
  (defun multiline-unix-example () 
    (with-input-from-string (s "this,is,a,\"test
  of
  multiline\", data
  row2,of,the,\"test
  of
  multiline\", data")
      (parse-csv s)))
  
  (defun multiline-dos-example ()
    (with-input-from-string 
        (s (concatenate 'string "this,is,a,\"test" (list #\Return #\Linefeed)
                        "of" (list #\Return #\Linefeed)
                        "multiline\", data" (list #\Return #\Linefeed)
                        "row2,of,the,\"test" (list #\Return #\Linefeed)
                        "of" (list #\Return #\Linefeed)
                        "multiline\", data" (list #\Return #\Linefeed)))
      (parse-csv s)))
  
  (defun multiline-mixed-example ()
    (with-input-from-string
        (s (concatenate 'string "this,is,a,\"test" (list #\Linefeed)
                        "of" (list #\Return #\Linefeed)
                        "multiline\", data" (list #\Return #\Linefeed)
                        "row2,of,the,\"test" (list #\Linefeed)
                        "of" (list #\Return #\Linefeed)
                        "multiline\", data" (list #\Linefeed)))
      (parse-csv s)))
  
  (deftest test-multiline-unix  (multiline-unix-example)  *multiline-answer*)
  (deftest test-multiline-dos   (multiline-dos-example)   *multiline-answer*)
  (deftest test-multiline-mixed (multiline-mixed-example) *multiline-answer*)

#+end_src

*** Running Tests

#+NAME: result-runner-and-printer
#+BEGIN_SRC lisp
      (defstruct results
        (tests 0)
        (failures nil))
      (defun results-failure-count (results)
        (length (results-failures results)))
      (defun results-successes (results)
        (- (results-tests results)
           (results-failure-count results)))
      
      (defun runtest (fun results)
        (let* ((success t)
               (output (with-output-to-string (*standard-output*)
                         (setf success (handler-case (funcall fun)
                                         (error (e) (princ e) nil))))))
          (make-results
           :tests (1+ (results-tests results))
           :failures (if success
                         (results-failures results)
                         (acons fun output (results-failures results))))))
      
      (defun present-failures (results)
        (format t "~%READ-CSV FAILURES:~%")
        (loop for (fn . problems) in (results-failures results)
              do (format t "~%~a~a~%" fn problems)))
      (defun present-results (results)
        (format t "~%READ-CSV TEST RESULTS:")
        (format t "~%     Tests: ~a~%   Success: ~a~%  Failures: ~a" 
                (results-tests results)
                (results-successes results)
                (results-failure-count results))
        (when (results-failures results)
          (present-failures results)))
    
      (defun run-combination-tests (starting-results)
        (reduce #'(lambda (description results) (runtest (make-test description) results))
                 (nreverse (mapcan #'(lambda (thing) (all-combinations (subseq thing 0 (min (length thing) 5))))
                          (loop for i on (reverse *all-statements*) collecting i)))
                 :from-end t
                 :initial-value starting-results))
    
      (defun run-explicit-tests (starting-results)
        (reduce #'(lambda (results function) (runtest function results))
                 (list #'test-tough
                       #'test-big
                       #'test-quoted-big
                       #'test-multiline-unix
                       #'test-multiline-dos
                       #'test-multiline-mixed)
                 :initial-value starting-results))
        
      (defun run-tests ()
        (format t "~%RUNNING READ-CSV TESTS...")
        (present-results (run-explicit-tests (run-combination-tests (make-results)))))
      
#+END_SRC

The bulk of the test code just has to do with collecting results and making pretty output.

* Tests Expressions

This package is tested by combining tricky CSV parts in numerous ways, and then
ensuring the parser can parse them correctly.

** Blanks 

#+TBLNAME: blankTests
|----------+----------------+--------------------------------------------------------|
| *CSV*    | *Should Parse* | *Note*                                                 |
|----------+----------------+--------------------------------------------------------|
| ><       | ><             | blank input                                            |
| > \t <   | ><             | whitespace input, *should be ignored.*                 |
| >""<     | ><             | blank input, but quoted, should be empty               |
| >" \t "< | > \t <         | blank input, but quoted, *should keep the whitespace.* |
|----------+----------------+--------------------------------------------------------|

** Quotes and Tricky Characters

#+TBLNAME: quoteTests
|--------------------+------------------+---------------------------------------------|
| *CSV*              | *Should Parse*   | *Note*                                      |
|--------------------+------------------+---------------------------------------------|
| >"multi\nline"< | >multi\nline< | Multiline input should work                 |
| >","<              | >,<              | Should be able to have seperator characters |
| >""""<             | >"<              | Double quotes should become a single quote. |
|--------------------+------------------+---------------------------------------------|

** International Text

#+TBLNAME: internationalTests
|-----------------------------+--------------------------+------------------------------|
| *CSV*                       | *Should Parse*           | *Note*                       |
|-----------------------------+--------------------------+------------------------------|
| >"êve,y\nth还ng\tat""once"< | >êve,y\nth还ng\tat"once< | Everything at once           |
|-----------------------------+--------------------------+------------------------------|

* License

Read-csv is distributed under the [[http://opensource.org/licenses/lgpl-2.1.php][LGPL2]] License. 

* Tangles							   :NOEXPORT:
** Copyright
#+name: copyright
#+begin_src lisp 
;;; Copyright (c) 2012, Warren Wilkinson.  All rights reserved.

;;; BEGIN_LICENSE:LGPL2
;;;
;;; This library is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU Library General Public License as published by
;;; the Free Software Foundation; version 2.
;;;
;;; This library is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Library General Public License for more details.
;;;
;;; You should have received a copy of the GNU Library General Public License
;;; along with this library; see the file COPYING.LIB.  If not, write to
;;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;;; Boston, MA 02110-1301, USA.
;;;
;;; END_LICENSE
#+end_src 

** read-csv.lisp

#+name: print-table (table=parser)
#+begin_src emacs-lisp
  (defun col-to-expr (col)
    (string-match "\\([[:alpha:]]*\\) ->\\(.*\\)" col)
    (format "(%s ,%s)" (match-string 1 col) (subseq (match-string 2 col) 0 5)))
  
  (defun row-to-expression (row)
    (concat "(" (mapconcat #'col-to-expr (cdr row) " ") ")"))
  
  (concat "`(" (mapconcat #'row-to-expression (cdr (remove 'hline table)) "\n  ") ")")
#+end_src

#+begin_src lisp :tangle read-csv.lisp :noweb yes 
  ;;; -*- Mode: LISP; Syntax: common-lisp; Package: read-csv; Base: 10 -*-
  
  <<copyright>> 
  
  (defpackage :read-csv
    (:use :common-lisp)
    (:export read-csv parse-csv))
  
  (in-package :read-csv)
  
  (defvar *records*)
  (defvar *record*)
  (defvar *white-char-count*)
  
  (eval-when (:compile-toplevel :load-toplevel :execute)
    <<primitives>>)
  
  (defconstant done! -1)
  (defconstant start 0) ;; Start
  (defconstant retur 1)  ;; Return (as in CRLF seen)
  (defconstant unquo 2)  ;; Unquoted text
  (defconstant quote 3)  ;; Quoted text
  (defconstant q+ret 4)  ;; Quoted and have seen return
  (defconstant q+quo 5)  ;; Quoted and have seen quote
  (defconstant q+q&w 6)  ;; Quoted and have seen quote, in following whitespace
  
  (defconstant +csv-table+
    (if (boundp '+csv-table+) +csv-table+
        (make-array '(7 6 2) 
         :initial-contents
      ;;WHITE,         RETURN,          LF,              QUOTE,           SEP,             OTHER
  <<print-table(table=parser)>>)))
  
  <<read-csv>>
   
  <<parse-csv>>
#+end_src

** test.lisp

#+name: tangle-tests (table=blankTests)
#+begin_src emacs-lisp
   (defun between>< (string) 
     (string-match ">\\([^<]*\\)<" string)
     (match-string 1 string))
   
   (defun fix-string (string) 
     (concat "(concatenate 'string \""
       (replace-regexp-in-string "\\\\n" "\" (list #\\\\Newline) \""
         (replace-regexp-in-string "\\\\t" "\" (list #\\\\Tab) \""
           (replace-regexp-in-string "\"" "\\\\\""
                                   (between>< string))))
       "\")"))
   
   (defun row-to-test (row)
     (let ((to-put (first row))
           (expected (second row)))
       (format "(cons %s %s)" (fix-string to-put) (fix-string expected))))
   
   (mapconcat #'row-to-test (cdr (remove 'hline table)) "\n")
   
#+end_src

#+begin_src lisp :tangle test.lisp :noweb yes 
;;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: CHANGED-STREAM.TEST; Base: 10 -*-

<<copyright>>

(defpackage :read-csv.test
  (:use :common-lisp :read-csv)
  (:export run-tests))

(in-package :read-csv.test)

(defvar *all-statements*
  (list ;; Blank Tests
        <<tangle-tests(table=blankTests)>>
        ;; Quote Tests
        <<tangle-tests(table=quoteTests)>>
        ;; international Tests
        <<tangle-tests(table=internationalTests)>>))

<<do-testing>>

<<parse-csv-tests>>

<<result-runner-and-printer>>

#+end_src

** read-csv.asd

#+begin_src lisp :tangle read-csv.asd :noweb yes
  ;;; -*- Mode: LISP; Syntax: COMMON-LISP;  Base: 10 -*-
    
  <<copyright>>
    
  (defsystem :read-csv
    :name "read-csv"
    :version "1.0.0"
    :author "Warren Wilkinson <warrenwilkinson@gmail.com>"
    :license "lgpl2"
    :description "A library for reading CSV data from streams."
    :components ((:file "read-csv"))
    :in-order-to ((test-op (load-op read-csv.test))))
  
  (defsystem :read-csv.test
    :name "read-csv.test"
    :version "1.0.0"
    :author "Warren Wilkinson <warrenwilkinson@gmail.com>"
    :description "Testing code for the read-csv library"
    :licence "LGPL2"
    :depends-on (:read-csv)
    :components ((:file "test")))
      
  (defmethod perform ((op asdf:test-op) (system (eql (find-system :read-csv))))
    (funcall (intern "RUN-TESTS" :read-csv.test)))
  
#+end_src

* Stuff To Do							   :NOEXPORT:
** DONE Get a github account place to put this on.
https://github.com/WarrenWilkinson/read-csv
** DONE Make it main source Tanglable
** DONE Tangle and ASDF load
** DONE Make the tests work.
** TODO Add additional CSV tests


(with-input-from-string (s
"first name,last name,\"job \"\"title\"\"\",number of hours,id
Russ,Tyndall,\"Software Developer's, \"\"Position\"\"\",26.2,1
Adam,Smith,Economist,37.5,2
John,Doe,Anonymous Human,42.1,3
Chuck,Darwin,Natural Philosipher,17.68,4
Bill,Shakespear,Bard,12.2,5
James,Kirk,Starship Captain,13.1,6
Bob,Anon,,13.1,6
Mr,Iñtërnâtiônàlizætiøn,,1.1,0")
  (parse-csv s))

(with-input-from-string (s 
"\"first name\",\"last name\",\"job \"\"title\"\"\",\"number of hours\",\"id\"
\"Russ\",\"Tyndall\",\"Software Developer's, \"\"Position\"\"\",\"26.2\",\"1\"
\"Adam\",\"Smith\",\"Economist\",\"37.5\",\"2\"
\"John\",\"Doe\",\"Anonymous Human\",\"42.1\",\"3\"
\"Chuck\",\"Darwin\",\"Natural Philosipher\",\"17.68\",\"4\"
\"Bill\",\"Shakespear\",\"Bard\",\"12.2\",\"5\"
\"James\",\"Kirk\",\"Starship Captain\",\"13.1\",\"6\"
\"Bob\",\"Anon\",\"\",\"13.1\",\"6\"
\"Mr\",\"Iñtërnâtiônàlizætiøn\",\"\",\"1.1\",\"0\"")
  (parse-csv s))

(with-input-from-string (s 
"this,is,a,\"test
of
multiline\", data
row2,of,the,\"test
of
multiline\", data")
  (parse-csv s))

(with-input-from-string (s 
			 "  \"very tough\"   ,    easier to do     
")
  (parse-csv s))

(with-input-from-string (s 
			 (concatenate 'string "this,is,a,\"test" (list #\Return #\Linefeed)
				      "of" (list #\Return #\Linefeed)
				      "multiline\", data" (list #\Return #\Linefeed)
				      "row2,of,the,\"test" (list #\Return #\Linefeed)
				      "of" (list #\Return #\Linefeed)
				      "multiline\", data" (list #\Return #\Linefeed)))
  (parse-csv s))
  
** TODO Publish this as HTML and make it the projects webpage.
** TODO package and release.
*** TODO Get an ebuild done.
*** WAITING Get it onto quicklisp.
*** TODO Get integration with cl-test-grid
https://github.com/cl-test-grid/cl-test-grid








